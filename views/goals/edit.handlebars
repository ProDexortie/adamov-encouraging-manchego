<div class="row">
  <div class="col-md-8 mx-auto">
    <div class="card">
      <div class="card-header bg-primary text-white">
        <h3 class="mb-0">Редактирование цели</h3>
      </div>
      <div class="card-body">
        <form action="/goals/update/{{goal._id}}" method="POST">
          <div class="mb-3">
            <label for="title" class="form-label">Название</label>
            <input type="text" id="title" name="title" class="form-control" value="{{goal.title}}" required>
          </div>
          
          <div class="mb-3">
            <label for="description" class="form-label">Описание</label>
            <textarea id="description" name="description" class="form-control" rows="3">{{goal.description}}</textarea>
          </div>
          
          <div class="row mb-3">
            <div class="col-md-4">
              <label for="targetDate" class="form-label">Дата достижения</label>
              <input type="text" id="targetDate" name="targetDate" class="form-control datepicker" value="{{formatDate goal.targetDate 'YYYY-MM-DD'}}" required>
            </div>
            
            <div class="col-md-4">
              <label for="category" class="form-label">Категория</label>
              <select id="category" name="category" class="form-select">
                <option value="Общее" {{#if (eq goal.category "Общее")}}selected{{/if}}>Общее</option>
                <option value="Работа" {{#if (eq goal.category "Работа")}}selected{{/if}}>Работа</option>
                <option value="Учеба" {{#if (eq goal.category "Учеба")}}selected{{/if}}>Учеба</option>
                <option value="Личное" {{#if (eq goal.category "Личное")}}selected{{/if}}>Личное</option>
                <option value="Здоровье" {{#if (eq goal.category "Здоровье")}}selected{{/if}}>Здоровье</option>
                <option value="Финансы" {{#if (eq goal.category "Финансы")}}selected{{/if}}>Финансы</option>
              </select>
            </div>
            
            <div class="col-md-4">
              <label for="status" class="form-label">Статус</label>
              <select id="status" name="status" class="form-select">
                <option value="Новая" {{#if (eq goal.status "Новая")}}selected{{/if}}>Новая</option>
                <option value="В процессе" {{#if (eq goal.status "В процессе")}}selected{{/if}}>В процессе</option>
                <option value="Завершена" {{#if (eq goal.status "Завершена")}}selected{{/if}}>Завершена</option>
              </select>
            </div>
          </div>
          
          <div class="mb-3">
            <label for="progress" class="form-label">Прогресс <span id="progress-display">{{goal.progress}}%</span></label>
            <input type="range" class="form-range" id="progress" name="progress" min="0" max="100" value="{{goal.progress}}">
            <div class="progress">
              <div class="progress-bar" role="progressbar" style="width: {{goal.progress}}%" aria-valuenow="{{goal.progress}}" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
          </div>
          
          <div class="mb-3">
            <label class="form-label">Подзадачи</label>
            <div id="subtasks-container">
              {{#each goal.subTasks}}
                <div class="subtask-item input-group mb-2">
                  <div class="input-group-text">
                    <input class="form-check-input subtask-checkbox" type="checkbox" name="completedSubTasks[]" value="{{@index}}" {{#if completed}}checked{{/if}}>
                  </div>
                  <input type="text" name="subTasks[]" class="form-control" value="{{title}}">
                  <button type="button" class="btn btn-outline-danger remove-subtask">
                    <i class="fas fa-times"></i>
                  </button>
                </div>
              {{/each}}
            </div>
            <button type="button" id="add-subtask" class="btn btn-outline-primary btn-sm mt-2">
              <i class="fas fa-plus"></i> Добавить подзадачу
            </button>
          </div>
          
          <div class="d-flex justify-content-between">
            <a href="/goals" class="btn btn-outline-secondary">Отмена</a>
            <button type="submit" class="btn btn-primary">Сохранить изменения</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Инициализация календаря выбора даты
  $('.datepicker').datepicker({
    format: 'yyyy-mm-dd',
    language: 'ru',
    autoclose: true,
    todayHighlight: true
  });
  
  // Очистка старых обработчиков
  const oldAddSubtaskBtn = document.getElementById('add-subtask');
  if (oldAddSubtaskBtn) {
    const newAddSubtaskBtn = oldAddSubtaskBtn.cloneNode(true);
    oldAddSubtaskBtn.parentNode.replaceChild(newAddSubtaskBtn, oldAddSubtaskBtn);
    
    // Динамическое добавление полей для подзадач
    newAddSubtaskBtn.addEventListener('click', function() {
      const subtasksContainer = document.getElementById('subtasks-container');
      
      const subtaskDiv = document.createElement('div');
      subtaskDiv.className = 'subtask-item input-group mb-2';
      
      // Для страницы edit используем чекбоксы, для add просто поля ввода
      if (window.location.pathname.includes('/edit/')) {
        subtaskDiv.innerHTML = `
          <div class="input-group-text">
            <input class="form-check-input subtask-checkbox" type="checkbox" name="completedSubTasks[]" value="${document.querySelectorAll('.subtask-item').length}">
          </div>
          <input type="text" name="subTasks[]" class="form-control" placeholder="Название подзадачи">
          <button type="button" class="btn btn-outline-danger remove-subtask">
            <i class="fas fa-times"></i>
          </button>
        `;
      } else {
        subtaskDiv.innerHTML = `
          <input type="text" name="subTasks[]" class="form-control" placeholder="Название подзадачи">
          <button type="button" class="btn btn-outline-danger remove-subtask">
            <i class="fas fa-times"></i>
          </button>
        `;
      }
      
      subtasksContainer.appendChild(subtaskDiv);
      
      // Обработчик удаления подзадачи
      subtaskDiv.querySelector('.remove-subtask').addEventListener('click', function() {
        subtaskDiv.remove();
        // Обновляем индексы только на странице редактирования
        if (window.location.pathname.includes('/edit/')) {
          updateSubtaskIndexes();
          updateProgress();
        }
      });
      
      // Добавляем обработчик для чекбокса только на странице редактирования
      if (window.location.pathname.includes('/edit/')) {
        const checkbox = subtaskDiv.querySelector('.subtask-checkbox');
        if (checkbox) {
          checkbox.addEventListener('change', updateProgress);
        }
      }
    });
  }
  
  // Обработчики удаления существующих подзадач
  document.querySelectorAll('.remove-subtask').forEach(button => {
    // Очистка старых обработчиков
    const newButton = button.cloneNode(true);
    button.parentNode.replaceChild(newButton, button);
    
    newButton.addEventListener('click', function() {
      this.closest('.subtask-item').remove();
      // Обновляем индексы только на странице редактирования
      if (window.location.pathname.includes('/edit/')) {
        updateSubtaskIndexes();
        updateProgress();
      }
    });
  });
  
  // Функции для страницы редактирования
  if (window.location.pathname.includes('/edit/')) {
    // Обновление индексов подзадач после удаления
    function updateSubtaskIndexes() {
      document.querySelectorAll('.subtask-item').forEach((item, index) => {
        const checkbox = item.querySelector('.subtask-checkbox');
        if (checkbox) {
          checkbox.value = index;
        }
      });
    }
    
    // Обновление прогресса цели на основе завершенных подзадач
    const subtaskCheckboxes = document.querySelectorAll('.subtask-checkbox');
    const progressInput = document.getElementById('progress');
    
    if (subtaskCheckboxes.length > 0 && progressInput) {
      // Очищаем старые обработчики
      subtaskCheckboxes.forEach(checkbox => {
        const newCheckbox = checkbox.cloneNode(true);
        checkbox.parentNode.replaceChild(newCheckbox, checkbox);
        newCheckbox.addEventListener('change', updateProgress);
      });
    }
    
    function updateProgress() {
      const total = document.querySelectorAll('.subtask-item').length;
      if (total === 0) return;
      
      const completed = document.querySelectorAll('.subtask-checkbox:checked').length;
      const progress = Math.round((completed / total) * 100);
      
      progressInput.value = progress;
      document.getElementById('progress-display').textContent = progress + '%';
      document.querySelector('.progress-bar').style.width = progress + '%';
    }
    
    // Обработчик изменения прогресса вручную
    if (progressInput) {
      // Очищаем старые обработчики
      const newProgressInput = progressInput.cloneNode(true);
      progressInput.parentNode.replaceChild(newProgressInput, progressInput);
      
      newProgressInput.addEventListener('input', function() {
        document.getElementById('progress-display').textContent = this.value + '%';
        document.querySelector('.progress-bar').style.width = this.value + '%';
      });
    }
  }
});
</script>